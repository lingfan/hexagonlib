/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.types{	import com.hexagonstar.data.constants.DataUnit;		/**	 * The Byte class represents a byte value.	 * 	 * <p>This class can be used for a different kind of formatting of a byte	 * value. It allows to access the value as Bit, Kilobit, Megabit, Gigabit,	 * Terabit, Byte, Kilobyte, Megabyte, Gigabyte, Terabyte etc.</p>	 */	public class Byte extends Bit	{		//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Constructs a new Byte instance.		 * 		 * @param value The byte value of the Byte.		 * @param decimals Determines how many decimal places the byte value should have.		 */		public function Byte(value:Number = 0, decimals:int = 2)		{			super((value * DataUnit.BYTE), decimals);		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Returns a well formatted string representation of the byte value. This		 * method uses the next matching size and adds the matching short name to it.		 * 		 * @example		 * <pre>		 *    new Byte(1).toString();          // 1B		 *    new Byte(1234).toString();       // 1.21kB		 *    new Byte(15002344).toString();   // 14.31MB		 * </pre>		 * 		 * @return Bytes in the next matching size with the matching unit.		 */		override public function toString():String		{			var result:String;						if (_value < DataUnit.KILOBYTE)				result = byte + DataUnit.SYMBOL_BYTE;			else if (_value < DataUnit.MEGABYTE)				result = kilobyte + DataUnit.SYMBOL_KILOBYTE;			else if (_value < DataUnit.GIGABYTE)				result = megabyte + DataUnit.SYMBOL_MEGABYTE;			else if (_value < DataUnit.TERABYTE)				result = gigabyte + DataUnit.SYMBOL_GIGABYTE;			else				result = terabyte + DataUnit.SYMBOL_TERABYTE;						return result;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The value of the Byte.		 */		override public function get value():Number		{			return byte;		}	}}