/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.types{	/**	 * Creates a standardized way of describing and storing percentages. You can store	 * and receive percentages in two different formats; regular percentage or as a	 * decimal percentage. If the percent is 37.5% a regular percentage would be	 * expressed as 37.5 while the decimal percentage will be expressed 0.375.	 * 	 * @example	 * <pre>	 *	var p:Percent = new Percent(37.5, false);	 *	trace(p.toString()); // 0.375%	 *	trace(p.percentage); // 37.5	 *	trace(p.decimalPercentage); // 0.375	 * </pre>	 */	public class Percent	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _percent:Number;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new Percent.		 * 		 * @param value Percent value formated at a percentage or an decimal percentage.		 * @param isDecimal Indicates if the specified value is a decimal percentage		 *         (true), or a regular percentage (false).		 */		public function Percent(value:Number = 0, isDecimal:Boolean = true)		{			if (isDecimal) decimalPercentage = value;			else percentage = value;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Determines if the percent specified in the percent parameter is equal to		 * this percent.		 * 		 * @param percent A Percent object.		 * @return true if percents are identical; otherwise false.		 */		public function equals(percent:Percent):Boolean		{			return decimalPercentage == percent.decimalPercentage;		}						/**		 * Clones the Percent.		 * 		 * @return A new percent object with the same value as this percent.		 */		public function clone():Percent		{			return new Percent(decimalPercentage);		}						/**		 * Returns a String Representation of Percent.		 * 		 * @return A String Representation of Percent.		 */		public function toString():String		{			return decimalPercentage + "%";		}						//-----------------------------------------------------------------------------------------		// Utility Methods		//-----------------------------------------------------------------------------------------				/**		 * Determines a value between two specified values.		 * 		 * @param amount The level of interpolation between the two values. If 0,		 *         begin value is returned; if 100, end value is returned.		 * @param min The lower value.		 * @param max The upper value.		 * 		 * @example		 * <pre>		 *     trace(Percent.interpolate(new Percent(0.5), 0, 10)); // Traces 5		 * </pre>		 */		public static function interpolate(amount:Percent, min:Number, max:Number):Number 		{			return min + (max - min) * amount.decimalPercentage;		}						/**		 * Determines a percentage of a value in a given range.		 *		 * @param value The value to be converted.		 * @param min The lower value of the range.		 * @param max The upper value of the range.		 * 		 * @example		 * <pre>		 *     trace(Percent.normalize(8, 4, 20).decimalPercentage); // Traces 0.25		 * </pre>		 */		public static function normalize(value:Number, min:Number, max:Number):Percent 		{			return new Percent((value - min) / (max - min));		}						/**		 * Maps a value from one coordinate space to another.		 * 		 * @param value Value from the input coordinate space to map to the output		 *         coordinate space.		 * @param min1 Starting value of the input coordinate space.		 * @param max1 Ending value of the input coordinate space.		 * @param min2 Starting value of the output coordinate space.		 * @param max2 Ending value of the output coordinate space.		 * 		 * @example		 * <pre>		 *     trace(Percent.map(0.75, 0, 1, 0, 100)); // Traces 75		 * </pre>		 */		public static function map(value:Number, min1:Number, max1:Number, min2:Number,			max2:Number):Number 		{			return interpolate(normalize(value, min1, max1), min2, max2);		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The percent expressed as a regular percentage. 37.5% would be expressed as 37.5.		 */		public function get percentage():Number		{			return 100 * _percent;		}		public function set percentage(v:Number):void		{			_percent = v * .01;		}						/**		 * The percent expressed as a decimal percentage. 37.5% would be expressed as 0.375.		 */		public function get decimalPercentage():Number		{			return _percent;		}		public function set decimalPercentage(v:Number):void		{			_percent = v;		}	}}