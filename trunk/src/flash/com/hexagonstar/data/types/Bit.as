/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.types{	import com.hexagonstar.data.constants.DataUnit;		/**	 * The Bit class is representing a bit value.<p>This class can be used for a	 * different kind of formatting of a bit value. It allows to access the value as	 * Bit, Kilobit, Megabit, Gigabit, Terabit, Byte, Kilobyte, Megabyte, Gigabyte and	 * Terabyte.</p>	 */	public class Bit	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/**		 * Stores the bit value.		 * @private		 */		protected var _value:Number;				/**		 * Stores how many decimal places the bit value has.		 * @private		 */		protected var _decimals:int;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Constructs a new Bit instance.		 * 		 * @param value The value for the Bit.		 * @param decimals Determines how many decimal places the bit value should have.		 */		public function Bit(value:Number = 0, decimals:int = 2)		{			_value = value;			_decimals = decimals;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Returns a well formatted string representation of the bit value. This method uses		 * the next matching size and adds the matching unit's short name to it.		 * 		 * @example		 * <pre>		 *    new Bit(1).toString();          // 1b		 *    new Bit(1234).toString();       // 1.21kb		 *    new Bit(15002344).toString();   // 14.31Mb		 * </pre>		 * 		 * @return Bits in the next matching size with the matching unit.		 */		public function toString():String		{			var result:String;			var v:int = bit;						if (v < DataUnit.KILOBIT)				result = bit + DataUnit.SYMBOL_BIT;			else if (v < DataUnit.MEGABIT)				result = kilobit + DataUnit.SYMBOL_KILOBIT;			else if (v < DataUnit.GIGABIT)				result = megabit + DataUnit.SYMBOL_MEGABIT;			else if (v < DataUnit.TERABIT)				result = gigabit + DataUnit.SYMBOL_GIGABIT;			else				result = terabit + DataUnit.SYMBOL_TERABIT;						return result;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The value of the Bit.		 */		public function get value():Number		{			return _value;		}		public function set value(v:Number):void		{			_value = v;		}				/**		 * The amount of decimals that the Bit has.		 */		public function get decimals():int		{			return _decimals;		}		public function set decimals(v:int):void		{			_decimals = v;		}				/**		 * Returns the value of the Bit measured in bits.		 */		public function get bit():Number		{			if (isNaN(_value)) _value = 0;			return _value;		}				/**		 * Returns the value of the Bit measured in Kilobit.		 */		public function get kilobit():Number		{			return Bit.round(bit / DataUnit.KILOBIT, _decimals);		}				/**		 * Returns the value of the Bit measured in Megabit.		 */		public function get megabit():Number		{			return Bit.round(bit / DataUnit.MEGABIT, _decimals);		}				/**		 * Returns the value of the Bit measured in Gigabit.		 */		public function get gigabit():Number		{			return Bit.round(bit / DataUnit.GIGABIT, _decimals);		}				/**		 * Returns the value of the Bit measured in Terabit.		 */		public function get terabit():Number		{			return Bit.round(bit / DataUnit.TERABIT, _decimals);		}				/**		 * Returns the value of the Bit measured in byte.		 */		public function get byte():Number		{			return Bit.round(bit / DataUnit.BYTE, _decimals);		}				/**		 * Returns the value of the Bit measured in Kilobyte.		 */		public function get kilobyte():Number		{			return Bit.round(bit / DataUnit.KILOBYTE, _decimals);		}				/**		 * Returns the value of the Bit measured in Megabyte.		 */		public function get megabyte():Number		{			return Bit.round(bit / DataUnit.MEGABYTE, _decimals);		}				/**		 * Returns the value of the Bit measured in Gigabyte.		 */		public function get gigabyte():Number		{			return Bit.round(bit / DataUnit.GIGABYTE, _decimals);		}				/**		 * Returns the value of the Bit measured in Terabyte.		 */		public function get terabyte():Number		{			return Bit.round(bit / DataUnit.TERABYTE, _decimals);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * Used internally by the class to round values.		 * @private		 */		protected static function round(n:Number, dec:int):Number		{			var r:Number = Math.pow(10, dec);			return Math.round(n * r) / r;		}	}}