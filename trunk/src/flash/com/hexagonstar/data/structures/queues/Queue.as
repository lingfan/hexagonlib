/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.structures.queues{	import com.hexagonstar.data.structures.ICollection;	import com.hexagonstar.data.structures.IIterator;	import com.hexagonstar.data.structures.ProtectedIterator;	import com.hexagonstar.data.structures.lists.ListIterator;	import com.hexagonstar.data.structures.lists.SLinkedList;		/**	 * A basic, linear queue based on a singly linked list. A queue is a FIFO (first-in	 * first-out) data structure that always removes elements at the top and adds	 * elements at the bottom.	 */	public class Queue extends AbstractQueue implements IQueue	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _list:SLinkedList;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Constructs a new Queue instance. If a source List is specified as the argument,		 * the Queue will step through it's elements beginning at position 0 and enqueues		 * all contained elements.		 * 		 * @example		 * <pre>		 *    var queue:Queue = new Queue([1, 2, 3, 4]);	 	 *    while (!queue.isEmpty()) {		 * 	      trace(queue.dequeue());		 *    }		 * </pre>		 * The output is made in the following order: 1, 2, 3, 4.		 * 		 * @param elements A list of values to populate the Queue with.		 */		public function Queue(...elements)		{			_list = new SLinkedList();						if (elements.length > 0)			{				var l:int = elements.length;				for (var i:int = 0; i < l; i++)				{					enqueue(elements[i]);				}			}		}						//-----------------------------------------------------------------------------------------		// Query Operations		//-----------------------------------------------------------------------------------------				/**		 * @inheritDoc		 */		override public function get size():int		{			return _list.size;		}						/**		 * @inheritDoc		 */		override public function get isEmpty():Boolean		{			return (_list.size < 1);		}						/**		 * @inheritDoc		 */		public function peek():*		{			if (_list.size > 0) return _list.getElementAt(0);			else return null;		}						/**		 * Returns the element from the queue that is at the specified index without		 * removing it.		 * 		 * @return The element or null if the queue is empty.		 * @throws com.hexagonstar.exception.IndexOutOfBoundsException if the specified		 *             index is lower than 0 or higher than the queue's current size.		 */		public function peekAt(index:int):*		{			if (_size > 0)			{				if (index < 0 || index >= _size)				{					return throwIndexOutOfBoundsException(index);				}				else				{					return _list.getElementAt(index);				}			}						return null;		}						/**		 * @inheritDoc		 */		override public function contains(element:*):Boolean		{			return _list.contains(element);		}						/**		 * @inheritDoc		 */		public function equals(collection:ICollection):Boolean		{			if (collection is Queue)			{				var q:Queue = Queue(collection);				var i:int = q.size;								if (i != _size)				{					return false;				}								while (i--)				{					if (q.peekAt(i) != _list.getElementAt(i))					{						return false;					}				}				return true;			}			return false;		}						/**		 * @inheritDoc		 */		public function clone():*		{			var queue:Queue = new Queue();			queue.addAll(this);			return queue;		}						/**		 * Returns an Iterator over the elements of the Queue. The Iterator returned is a		 * protected Itertator so that no elements from the Queue can be removed with it.		 * 		 * @return an Iterator over the elements in the Queue.		 */		public function iterator():IIterator		{			return (new ProtectedIterator(new ListIterator(_list)));		}						/**		 * @inheritDoc		 */		public function toArray():Array		{			return _list.toArray();		}						/**		 * @inheritDoc		 */		public function dump():String		{			var s:String = "\n" + toString();			for (var i:int = 0; i < _list.size; i++)			{				s += "\n[" + i + ": " + _list.getElementAt(i) + "]";			}			return s;		}						//-----------------------------------------------------------------------------------------		// Modification Operations		//-----------------------------------------------------------------------------------------				/**		 * Enqueues the specified element to the Queue. This does the same like calling		 * enqueue().		 * 		 * @param element The element to be enqueued to the Queue.		 * @return true if the element was enqueued to the Queue successfully otherwise		 *         false.		 */		public function add(element:*):Boolean		{			return enqueue(element);		}						/**		 * @inheritDoc		 */		public function enqueue(element:*):Boolean		{			return _list.append(element);		}						/**		 * Operation not supported by the Queue!		 * 		 * Throws an unsupported Operation Exceptions as the removal of elements is not		 * allowed in this Queue.		 * 		 * @return null.		 * @throws com.hexagonstar.exception.UnsupportedOperationException		 */		public function remove(element:*):*		{			throwRemoveNotSupported();			return null;		}						/**		 * @inheritDoc		 */		public function dequeue():*		{			return _list.removeFirst();		}						//-----------------------------------------------------------------------------------------		// Bulk Operations		//-----------------------------------------------------------------------------------------				/**		 * @inheritDoc		 */		public function addAll(collection:ICollection):Boolean		{			return _list.addAll(collection);		}						/**		 * Operation not supported by the Queue!		 * 		 * Throws an unsupported Operation Exceptions as the removal of elements is not		 * allowed in the Queue.		 * 		 * @return false.		 * @throws com.hexagonstar.exception.UnsupportedOperationException		 */		public function removeAll(collection:ICollection):Boolean		{			return throwRemoveNotSupported();		}						/**		 * Operation not supported by the Queue!		 * 		 * Throws an unsupported Operation Exceptions as the removal of elements is not		 * allowed in the Queue.		 * 		 * @return false.		 * @throws com.hexagonstar.exception.UnsupportedOperationException		 */		public function retainAll(collection:ICollection):Boolean		{			return throwRemoveNotSupported();		}						/**		 * @inheritDoc		 */		public function clear():void		{			_list.clear();		}	}}