/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	import flash.display.DisplayObject;	import flash.system.Capabilities;		/**	 * Utilities for determining the location of the SWF and the type of runtime environment.	 */	public class EnvUtil	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				public static const PLATFORM_WINDOWS:String		= "win";		public static const PLATFORM_MACINTOSH:String	= "mac";		public static const PLATFORM_LINUX:String		= "lnx";						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Determines if the SWF is being served on the internet.		 * 		 * @param location DisplayObject to get location of.		 * @return true if SWF is being served on the internet; otherwise false.		 *		 * @example		 * <pre>		 *     trace(EnvUtil.isWeb(_root));		 * </pre>		 */		public static function isWeb(location:DisplayObject):Boolean		{			return location.loaderInfo.url.substr(0, 4) == "http";		}						/**		 * Determines if the SWF is running in a browser plug-in.		 * 		 * @return true if SWF is running in the Flash Player browser plugin; otherwise false.		 */		public static function isPlugin():Boolean		{			return Capabilities.playerType == "PlugIn"				|| Capabilities.playerType == "ActiveX";		}						/**		 * Determines if the SWF is running in the IDE.		 * 		 * @return true if SWF is running in the Flash Player version used by the		 *          external player or test movie mode; otherwise false.		 */		public static function isIDE():Boolean		{			return Capabilities.playerType == "External";		}						/**		 * Determines if the SWF is running in the StandAlone player.		 * 		 * @return true if SWF is running in the Flash StandAlone Player; otherwise false.		 */		public static function isStandAlone():Boolean		{			return Capabilities.playerType == "StandAlone";		}						/**		 * Determines if the runtime environment is an AIR application.		 *		 * @return true if the runtime environment is an AIR application; otherwise false.		 */		public static function isAIRApplication():Boolean		{			return Capabilities.playerType == "Desktop";		}						/**		 * Detects if the SWF's embed location matches the specified domain.		 *		 * @param location DisplayObject to compare location of.		 * @param domain Web domain.		 * @return true if file's embed location matched passed domain; otherwise false.		 * 		 * @example		 * To check for domain:		 * <pre>		 *     trace(EnvUtil.isDomain(_root, "google.com"));		 *     trace(EnvUtil.isDomain(_root, "bbc.co.uk"));		 * </pre>		 * 		 * You can also check for subdomains:		 * <pre>		 *     trace(EnvUtil.isDomain(_root, "subdomain.foo.com"))		 * </pre>		 */		public static function isDomain(location:DisplayObject, domain:String):Boolean		{			return getDomain(location).slice(-domain.length) == domain;		}						/**		 * Returns the full path of location that the SWF is stored in which is		 * identified by the specified display object.		 * 		 * @param location DisplayObject to get full path of.		 * @return full path of DisplayObject's location.		 * 		 * @example		 * <pre>		 *     trace(EnvUtil.getPath(stage)); // http://www.yourdomain.com/flash/test/		 * </pre>		 */		public static function getPath(location:DisplayObject):String		{			var s:String = location.loaderInfo.url;			return s.substr(0, s.lastIndexOf("/") + 1);		}						/**		 * Detects the specified DisplayObject's domain location. The method does		 * not return folder path or file name. The method also treats "www" and		 * sans "www" as the same; if "www" is present method does not return it.		 * 		 * @param location DisplayObject to get location of.		 * @return full domain (including sub-domains) of DisplayObject's location.		 * 		 * @example		 * <pre>		 *     trace(EnvUtil.getDomain(stage));		 * </pre>		 */		public static function getDomain(location:DisplayObject):String		{			var baseUrl:String = String(location.loaderInfo.url.split('://')[1]).split('/')[0];			return (baseUrl.substr(0, 4) == "www.") ? baseUrl.substr(4) : baseUrl;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Returns a string determining the current platform that the application		 * runs on. Use EnvUtil.PLATFORM... constants for comparsion.		 */		public static function get platform():String		{			return Capabilities.version.substr(0, 3).toLowerCase();		}	}}