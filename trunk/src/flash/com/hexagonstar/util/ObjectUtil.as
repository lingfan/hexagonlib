/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	import flash.utils.ByteArray;		/**	 * Provides utility methods for working with Objects.	 */	public class ObjectUtil	{		//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Creates a Vector comprised of all the keys in an Object.		 * 		 * @param obj Object in which to find keys.		 * @return Vector containing all the string key names.		 */		public static function getKeys(obj:Object):Vector.<String>		{			var keys:Vector.<String> = new Vector.<String>();			for (var k:String in obj)			{				keys.push(k);			}			return keys;		}						/**		 * Searches the first level properties of an object for another object.		 * 		 * @param obj Object to search in.		 * @param member Object to search for.		 * @return Returns true if object was found; otherwise false.		 */		public static function contains(obj:Object, member:Object):Boolean		{			for (var p:String in obj)			{				if (obj[p] == member) return true;			}			return false;		}						/**		 * Uses a ByteArray to make a clone of the specified Object. References		 * to/from the object will not be cloned.		 * 		 * @param obj Object to make the clone of.		 * @return a duplicate Object.		 * 		 * @example		 * <pre>		 *     author = new Person();		 *     author.name = "Giles";		 *     registerClassAlias("Person", Person);		 *     var clone:Person = Person(ObjectUtil.clone(author));		 *     trace(clone.name);		 * </pre>		 */		public static function clone(obj:Object):Object		{			var b:ByteArray = new ByteArray();			b.writeObject(obj);			b.position = 0;			return b.readObject();		}						/**		 * Uses the strict equality operator to determine if object is undefined.		 * 		 * @param obj Object to determine if undefined.		 * @return true if object is undefined; otherwise false.		 */		public static function isUndefined(obj:Object):Boolean		{			return obj is undefined;		}						/**		 * Uses the strict equality operator to determine if object is null.		 * 		 * @param obj Object to determine if null.		 * @return true if object is null; otherwise false.		 */		public static function isNull(obj:Object):Boolean		{			return obj === null;		}						/**		 * Determines if the specified object contains no value(s).		 * 		 * @param obj Object to determine if empty.		 * @return true if object is empty; otherwise false.		 * 		 * @example		 * <pre>		 *     var testNumber:Number;		 *     var testArray:Array = [];		 *     var testString:String = "";		 *     var testObject:Object = {};		 *     trace(ObjectUtil.isEmpty(testNumber)); // traces "true"		 *     trace(ObjectUtil.isEmpty(testArray)); // traces "true"		 *     trace(ObjectUtil.isEmpty(testString)); // traces "true"		 *     trace(ObjectUtil.isEmpty(testObject)); // traces "true"		 * </pre>		 */		public static function isEmpty(obj:*):Boolean		{			if (obj == undefined) return true;			if (obj is Number) return isNaN(obj);			if (obj is Array) return (obj as Array).length == 0;			if (obj is String) return (obj as String).length == 0;						if (obj is Object)			{				for (var p:String in obj)				{					return false;				}				return true;			}			return false;		}	}}