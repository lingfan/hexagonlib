/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.display{	import com.hexagonstar.exception.IllegalStateException;	import com.hexagonstar.util.ObjectUtil;	import flash.display.Stage;	import flash.utils.Dictionary;		/**	 * Stores a reference to Stage for classes that cannot easily access it. This class	 * allows you to store multiple references by ID to different Stages which is	 * helpful in an AIR environment.<p> You must first initialize the class by setting	 * a reference to Stage. See example below.</p>	 * 	 * @example	 * <pre>	 *     package	 *     {	 *         import flash.display.MovieClip;	 *         import com.hexagonstar.display.StageReference;	 *         	 *         public class Example extends MovieClip	 *         {	 *             public function Example()	 *             {	 *                 StageReference.stage = stage;	 *                 trace(StageReference.stage.stageWidth);	 *             }	 *         }	 *     }	 * </pre>	 */	public class StageReference	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				/**		 * Constant definition to identify the stored default stage.		 */		public static const STAGE_DEFAULT:String = "stageDefault";						//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected static var _stageMap:Dictionary;						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------
				/**		 * Returns a reference to Stage.		 * 		 * @param id The identifier for the Stage instance.		 * @return The Stage instance.		 * @throws com.hexagonstar.exception.IllegalStateException if you try to		 *          get a Stage that has not been defined.		 */		public static function getStage(id:String = StageReference.STAGE_DEFAULT):Stage		{			if (!getMap()[id])			{				throw new IllegalStateException("[StageReference] Cannot get Stage '"					+ id + "' before it has been set.");			}						return getMap()[id];		}						/**		 * Stores a reference to Stage.		 * 		 * @param stage The Stage you wish to store.		 * @param id The identifier for the Stage.		 */		public static function setStage(stage:Stage, id:String = StageReference.STAGE_DEFAULT):void		{			getMap()[id] = stage;		}						/**		 * Removes a stored reference to a Stage.		 * 		 * @param id The identifier for the Stage.		 * @return true if the Stage reference was found and removed; otherwise false.		 */		public static function removeStage(id:String = StageReference.STAGE_DEFAULT):Boolean		{			if (!getMap()[id])			{				return false;			}						setStage(null, id);			return true;		}						/**		 * Finds all the Stage reference IDs.		 * 		 * @return A Vector with Strings comprised of all the Stage reference identifiers.		 */		public static function getIDs():Vector.<String>		{			return ObjectUtil.getKeys(getMap());		}						/**		 * Finds the identifier for a stored Stage reference.		 * 		 * @param stage The Stage you wish to find the identifier of.		 * @return The id for the stored Stage reference or null if it doesn't exist.		 */		public static function getStageID(stage:Stage):String		{			var map:Dictionary = getMap();			for (var i:String in map)			{				if (map[i] == stage)				{					return i;				}			}			return null;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The default Stage reference.		 */		public static function get stage():Stage		{			return getStage();		}		public static function set stage(v:Stage):void		{			setStage(v);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				protected static function getMap():Dictionary		{			if (!_stageMap) _stageMap = new Dictionary();			return _stageMap;		}	}}