/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.debug{	/**	 * Defines static logging level constants for use with logging classes.	 */	public final class LogLevel	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				/**		 * A logging level used for generic temporary trace outputs, typically used		 * to inspect or test a property or to output a temporary message that helps		 * during development.		 */		public static const TRACE:int		= 0;				/**		 * A logging level used for debugging information. Output data of this kind		 * should typically be only sent during development and testing and should		 * be either removed or at least filtered in a release build.		 */		public static const DEBUG:int		= 1;				/**		 * A logging level used for informational output that is supposed to stay		 * in an application after release.		 */		public static const INFO:int		= 2;				/**		 * A logging level used to output warnings. Warnings tell the user that a		 * problem in the application occured but the application can continue		 * functioning.		 */		public static const WARN:int		= 3;				/**		 * A logging level used to output error messages.		 */		public static const ERROR:int		= 4;				/**		 * A logging level used to output fatal error messages.		 */		public static const FATAL:int		= 5;	}}