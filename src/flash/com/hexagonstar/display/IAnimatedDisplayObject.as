/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.display{	import com.hexagonstar.time.FrameRateInterval;		/**	 * Interface for animateable display objects.	 */	public interface IAnimatedDisplayObject	{		//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Starts the playback of the animated display object. If the animated display		 * object is already playing while calling this method, it calls stop() and then		 * play again instantly to allow for framerate changes during playback.		 */		function play():void;						/**		 * Stops the playback of the animated display object.		 */		function stop():void;						/**		 * Jumps to the specified frameNr and plays the animated display object from that		 * position. Note that the frames of an animated display object start at 1.		 * 		 * @param frameNr The frame number to which to jump.		 */		function gotoAndPlay(frame:Object, scene:String = null):void						/**		 * Jumps to the specified frameNr and stops the animated display object at that		 * position. Note that the frames of an animated display object start at 1.		 * 		 * @param frameNr The frame number to which to jump.		 */		function gotoAndStop(frame:Object, scene:String = null):void						/**		 * Moves the animation to the next of the current frame. If the animated display		 * object is playing, the playback is stopped by this operation.		 */		function nextFrame():void;						/**		 * Moves the animation to the previous of the current frame. If the animated display		 * object is playing, the playback is stopped by this operation.		 */		function prevFrame():void;						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Sets the framerate interval object used for the animated display object. This		 * method is useful when it is desired to change the framerate at a later time.		 * 		 * @param v The framerate interval used for the animated display object.		 */		function set frameRateInterval(v:FrameRateInterval):void;						/**		 * Returns the framerate with that the animated display object is playing.		 * 		 * @return The fps value of the animated display object.		 */		function get frameRate():int;						/**		 * Returns the current frame position of the animated display object.		 * 		 * @return The current frame position.		 */		function get currentFrame():int;						/**		 * Returns the total amount of frames that the animated display object has.		 * 		 * @return The total frame amount.		 */		function get totalFrames():int;						/**		 * Indicates the playmode of the animated displayobject.		 * 		 * @see #PlayMode		 */		function get playMode():int;						/**		 * Returns whether the animated display object is playing or not.		 * 		 * @return true if the animated display object is playing, else false.		 */		function get playing():Boolean;	}}