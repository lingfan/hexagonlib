/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.display.shapes{	import flash.display.JointStyle;	import flash.display.LineScaleMode;	import flash.display.Shape;		/**	 * Creates a regular hexagonal shape. You specify the height of the hexagon and the	 * width of it is calculated automatically from the six same-length sides.	 * <p>Additionally you can use the calculateWidth method to receive the width of the	 * hexagon by specifying it's height before the hexagon is actually created.</p>	 */	public class HexagonShape extends Shape	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected static var _cmds:Vector.<int>;		/** @private */		protected static var _angle:Number = 30 * Math.PI / 180;		/** @private */		protected static var _tan:Function = Math.tan;		/** @private */		protected static var _pow:Function = Math.pow;		/** @private */		protected static var _sqrt:Function = Math.sqrt;		/** @private */		protected static var _round:Function = Math.round;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new HexagonShape instance.		 * 		 * @param height The height of the hexagon.		 * @param fillColor The fill color for the hexagon.		 * @param fillAlpha The fill alpha for the hexagon.		 * @param lineThickness Determines the thickness of the border line.		 * @param lineColor The line color for the hexagon.		 * @param lineAlpha The line alpha for the hexagon.		 */		public function HexagonShape(height:int					= 0,										fillColor:uint			= 0xFF00FF,										fillAlpha:Number		= 1.0,										lineThickness:Number	= NaN,										lineColor:uint			= 0x000000,										lineAlpha:Number		= 1.0)		{			/* We only need to create the draw commands vector once */			if (!_cmds)			{				_cmds = new Vector.<int>(7, true);				_cmds[0] = 1;				_cmds[1] = 2;				_cmds[2] = 2;				_cmds[3] = 2;				_cmds[4] = 2;				_cmds[5] = 2;				_cmds[6] = 2;			}						if (height > 0)				draw(height, fillColor, fillAlpha, lineThickness, lineColor, lineAlpha);		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Draws the HexagonShape.		 * 		 * @param height The height of the hexagon.		 * @param fillColor The fill color for the hexagon.		 * @param fillAlpha The fill alpha for the hexagon.		 * @param lineThickness Determines the thickness of the border line.		 * @param lineColor The line color for the hexagon.		 * @param lineAlpha The line alpha for the hexagon.		 */		public function draw(height:int,							   fillColor:uint		= 0xFF00FF,							   fillAlpha:Number		= 1.0,							   lineThickness:Number	= NaN,							   lineColor:uint		= 0x000000,							   lineAlpha:Number		= 1.0):void		{			if (height != this.height)			{				/* Calculate the sides of the triangle that is one edge of the 'hexagon-square'.				 * o = opposite leg, a = adjacent leg, h = hypotenuse (= hexagon side length). */				var o:Number = height / 2;				var a:int = _round(o * _tan(_angle));				var h:int = _round(_sqrt(_pow(o, 2) + _pow(a, 2)));				var w:int = (a * 2) + h;								/* Create the vector with data for the drawPath operation */				var d:Vector.<Number> = new Vector.<Number>(14, true);				d[0] = a;				d[1] = 0;				d[2] = a + h;				d[3] = 0;				d[4] = w;				d[5] = o;				d[6] = a + h;				d[7] = height;				d[8] = a;				d[9] = height;				d[10] = 0;				d[11] = o;				d[12] = a;				d[13] = 0;			}						graphics.clear();			graphics.lineStyle(lineThickness, lineColor, lineAlpha, true,				LineScaleMode.NORMAL, null, JointStyle.MITER);			graphics.beginFill(fillColor, fillAlpha);			graphics.drawPath(_cmds, d);			graphics.endFill();		}						/**		 * Calculates the width of a HexagonShape that has the specified height.		 * 		 * @param height The height of the Hexagonshape.		 * @return The width that a HexagonShape with the specified height would have.		 */		public static function calculateWidth(height:int):int		{			/* Calculate the sides of the triangle that is one edge of the 'hexagon-square'.			 * o = opposite leg, a = adjacent leg, h = hypotenuse (= hexagon side length). */			var o:Number = height / 2;			var a:int = _round(o * _tan(_angle));			var h:int = _round(_sqrt(_pow(o, 2) + _pow(a, 2)));			var w:int = (a * 2) + h;			return w;		}	}}