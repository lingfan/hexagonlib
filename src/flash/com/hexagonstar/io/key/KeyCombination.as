/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.key{	import com.hexagonstar.core.BasicClass;	import com.hexagonstar.exception.DataStructureException;		/**	 * Represents a combination of keys that are being held down at the same time.	 */	public class KeyCombination extends BasicClass	{		////////////////////////////////////////////////////////////////////////////////////////		// Properties                                                                         //		////////////////////////////////////////////////////////////////////////////////////////				/** @private */		protected var _keyCodes:Vector.<uint>;						////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates and defines a KeyCombination.		 * 		 * @param keyCodes A series of key codes that define a key combination.		 * @throws DataStructureException if keyCodes contains non-uint types.		 */		public function KeyCombination(keyCodes:Array)		{			// TODO There is still a bug with KeyCombination when more than 3 keys are used!						var l:int = keyCodes.length;						while (l--)			{				if (!(keyCodes[l] is uint))				{					throw new DataStructureException("A KeyCombination may only be"						+ " created with uint keycodes.");				}			}						_keyCodes = new Vector.<uint>();			for each (var i:uint in keyCodes)			{				_keyCodes.push(i);			}		}
		
		/**		 * Determines if the KeyCombination specified in the kc parameter is equal		 * to this KeyCombination.		 * 		 * @param kc The KeyCombination class to compare to this class.		 * @return true if the two KeyCombinations contain the same key codes in the		 *          same order; otherwise false.		 */		public function equals(kc:KeyCombination):Boolean		{			if (kc == this)			{				return true;			}						var keyCodes2:Vector.<uint> = kc.keyCodes;			var l:int = _keyCodes.length;						if (l != keyCodes2.length) return false;						while (l--)			{				if (_keyCodes[l] != keyCodes2[l]) return false;			}			return true;		}						/**		 * Returns a String Representation of KeyCombination.		 * 		 * @return A String Representation of KeyCombination.		 */		override public function toString(...args):String		{			return super.toString("keyCodes=" + _keyCodes);		}						////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Returns the key codes that compose this KeyCombination.		 * 		 * @return A uint Vector with key codes.		 */		public function get keyCodes():Vector.<uint>		{			return _keyCodes.concat();		}						/**		 * The length of the key combination, i.e. how many keys are in it.		 */		public function get length():int		{			return _keyCodes.length;		}	}}