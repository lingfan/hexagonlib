/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.event.BulkFileIOEvent;	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.io.file.types.ZipFile;	import com.hexagonstar.util.EnvUtil;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;			/**	 * BulkFile is a wrapper for IFiles which are being loaded with the BulkLoader. You	 * don't use this class directly, instead yuo create file objects of file type classes	 * that implement IFile and add these for loading to the BulkLoader. The BulkLoader	 * then temporarily wraps the files into BulkFiles for loading.	 * 	 * @see com.hexagonstar.io.file.BulkLoader	 * @see com.hexagonstar.io.file.BulkSoundFile	 * @see com.hexagonstar.io.file.types.IFile	 */	public class BulkFile extends EventDispatcher implements IBulkFile	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				/** @private */		internal static const STATUS_INITIALIZED:String		= "statusInitialized";		/** @private */		internal static const STATUS_PROGRESSING:String		= "statusProgressing";		/** @private */		internal static const STATUS_LOADED:String			= "statusLoaded";		/** @private */		internal static const STATUS_ERROR:String			= "statusError";						//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _file:IFile;		/** @private */		protected var _urlLoader:URLLoader;		/** @private */		protected var _bytesLoaded:uint;		/** @private */		protected var _bytesTotal:uint;		/** @private */		protected var _retryCount:int;		/** @private */		protected var _status:String;		/** @private */		protected var _loading:Boolean;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new bulk file instance.		 * 		 * @param file The file to be wrapped into the bulk file.		 */		public function BulkFile(file:IFile)		{			_file = file;			_status = BulkFile.STATUS_INITIALIZED;
			_retryCount = _bytesLoaded = _bytesTotal = 0;
			_loading = false;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * @inheritDoc		 */		public function load(useAbsoluteFilePath:Boolean, preventCaching:Boolean):void		{			if (_loading) return;						_loading = true;			_status = BulkFile.STATUS_PROGRESSING;						_urlLoader = new URLLoader();			_urlLoader.dataFormat = URLLoaderDataFormat.BINARY;						_urlLoader.addEventListener(Event.OPEN, onOpen, false, 0, true);			_urlLoader.addEventListener(ProgressEvent.PROGRESS, onProgress, false, 0, true);			_urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus, false,				0, true);			_urlLoader.addEventListener(Event.COMPLETE, onFileComplete, false, 0, true);			_urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			_urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError,				false, 0, true);						var r:URLRequest = BulkFile.createURLRequest(_file.path, useAbsoluteFilePath,				preventCaching);						try			{				_urlLoader.load(r);			}			catch (err:Error)			{				onSecurityError(new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR,					false, false, err.message));			}		}						/**		 * @inheritDoc		 */		public function dispose():void		{			removeLoaderListenersFrom();			_urlLoader = null;		}						/**		 * @inheritDoc		 */		override public function toString():String		{			return "[BulkFile, path=" + _file.path + "]";		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * @inheritDoc		 */		public function get loading():Boolean		{			return _loading;		}						/**		 * @inheritDoc		 */		public function get file():IFile		{			return _file;		}						/**		 * @inheritDoc		 */		public function get priority():Number		{			return _file.priority;		}						/**		 * @inheritDoc		 */		public function get weight():int		{			return _file.weight;		}						/**		 * @inheritDoc		 */		public function get status():String		{			return _status;		}		public function set status(v:String):void		{			_status = v;		}						/**		 * @inheritDoc		 */		public function get retryCount():int		{			return _retryCount;		}		public function set retryCount(v:int):void		{			_retryCount = (v < 0) ? 0 : (v > int.MAX_VALUE) ? int.MAX_VALUE : v;		}						/**		 * @inheritDoc		 */		public function get bytesLoaded():uint		{			return _bytesLoaded;		}						/**		 * @inheritDoc		 */		public function get bytesTotal():uint		{			return _bytesTotal;		}						/**		 * @inheritDoc		 */		public function get percentLoaded():Number		{			return (_bytesLoaded / _bytesTotal) * 100;		}						//-----------------------------------------------------------------------------------------		// Event Handlers		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function onOpen(e:Event):void		{			relayEvent(FileIOEvent.OPEN);		}						/**		 * @private		 */		protected function onProgress(e:ProgressEvent):void		{			/* Special rule for ZipFiles: loaded size is not set on their			 * size property but their compressedSize since the size property			 * of a ZipFile should return it's uncompressed size to follow			 * same behavior with ZippedFiles! */			if (_file is ZipFile) ZipFile(_file).compressedSize = e.bytesLoaded;			else _file.size = e.bytesLoaded;						_bytesLoaded = e.bytesLoaded;			_bytesTotal = e.bytesTotal;			relayEvent(FileIOEvent.PROGRESS);		}						/**		 * @private		 */		protected function onHTTPStatus(e:HTTPStatusEvent):void		{			relayEvent(FileIOEvent.HTTP_STATUS, "", e.status);		}						/**		 * @private		 */		protected function onFileComplete(e:Event):void		{			_status = BulkFile.STATUS_LOADED;			_loading = false;			removeLoaderListenersFrom();			_file.addEventListener(Event.COMPLETE, onFileReady, false, 0, true);			_file.content = _urlLoader.data;		}						/**		 * @private		 */		protected function onFileReady(e:Event):void 		{			_file.removeEventListener(Event.COMPLETE, onFileReady);			relayEvent(FileIOEvent.FILE_COMPLETE);		}						/**		 * @private		 */		protected function onIOError(e:IOErrorEvent):void		{			_status = BulkFile.STATUS_ERROR;			_loading = false;			removeLoaderListenersFrom();			relayEvent(FileIOEvent.IO_ERROR, e.text);		}						/**		 * @private		 */		protected function onSecurityError(e:SecurityErrorEvent):void		{			_status = BulkFile.STATUS_ERROR;			_loading = false;			removeLoaderListenersFrom();			relayEvent(FileIOEvent.SECURITY_ERROR, e.text);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function removeLoaderListenersFrom():void		{			_urlLoader.removeEventListener(Event.OPEN, onOpen);			_urlLoader.removeEventListener(ProgressEvent.PROGRESS, onProgress);			_urlLoader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			_urlLoader.removeEventListener(Event.COMPLETE, onFileComplete);			_urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			_urlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * @private		 */		protected function relayEvent(type:String, text:String = null, status:int = 0):void		{			dispatchEvent(new BulkFileIOEvent(type, this, text, status));		}						/**		 * @private		 */		protected static function createURLRequest(path:String, useAbsoluteFilePath:Boolean,			preventCaching:Boolean):URLRequest		{			return new URLRequest((useAbsoluteFilePath				? EnvUtil.getPath(StageReference.stage) + path				: path) + (!preventCaching ? "" : "?nocaching=" + new Date().time));		}	}}