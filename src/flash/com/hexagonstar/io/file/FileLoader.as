/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file{	import com.hexagonstar.display.StageReference;	import com.hexagonstar.event.FileIOEvent;	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.util.EnvUtil;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;			/**	 * A light-weight file loader that can be used to load a single file at a time. For	 * loading multiple files in one operation use the BulkLoader class instead.	 * 	 * @see com.hexagonstar.io.file.BulkLoader	 */	public class FileLoader extends EventDispatcher	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _file:IFile;		/** @private */		protected var _urlLoader:URLLoader;		/** @private */		protected var _bytesLoaded:uint;		/** @private */		protected var _bytesTotal:uint;		/** @private */		protected var _useAbsoluteFilePath:Boolean;		/** @private */		protected var _preventCaching:Boolean;		/** @private */		protected var _loading:Boolean;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new file loader instance.		 * 		 * @param useAbsoluteFilePath If true absolute file paths are used.		 * @param preventCaching If true the loader adds a timestamp to the file path to		 *            prevent file caching by server caches or proxies.		 */		public function FileLoader(useAbsoluteFilePath:Boolean = false,			preventCaching:Boolean = false)		{			_useAbsoluteFilePath = useAbsoluteFilePath;			_preventCaching = preventCaching;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Loads the specified file.		 * 		 * @param file The file to load.		 * @return true if the load operation has been started successfully, false if not,		 *         e.g. the File loader is already loading or a security error occured.		 */		public function load(file:IFile):Boolean		{			if (_loading) return false;						_file = file;			_loading = true;						var path:String = (_useAbsoluteFilePath ? EnvUtil.getPath(StageReference.stage)				+ _file.path : _file.path)				+ (!_preventCaching ? "" : "?nocaching=" + new Date().time);						_urlLoader = new URLLoader();			_urlLoader.dataFormat = URLLoaderDataFormat.BINARY;						_urlLoader.addEventListener(Event.OPEN, onOpen, false, 0, true);			_urlLoader.addEventListener(ProgressEvent.PROGRESS, onProgress, false, 0, true);			_urlLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus, false,				0, true);			_urlLoader.addEventListener(Event.COMPLETE, onFileComplete, false, 0, true);			_urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			_urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError,				false, 0, true);						try			{				_urlLoader.load(new URLRequest(path));			}			catch (err:Error)			{				onSecurityError(new SecurityErrorEvent(SecurityErrorEvent.SECURITY_ERROR,					false, false, err.message));				return false;			}						return true;		}						/**		 * Returns a String Representation of the file loader.		 * 		 * @return A String Representation of the file loader.		 */		override public function toString():String		{			return "[FileLoader]";		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Indicates whether the loader is currently in a load operation or not.		 */		public function get loading():Boolean		{			return _loading;		}						/**		 * The file's currently loaded bytes.		 */		public function get bytesLoaded():uint		{			return _bytesLoaded;		}						/**		 * The file's total bytes.		 */		public function get bytesTotal():uint		{			return _bytesTotal;		}						/**		 * The file's load progress in percent.		 */		public function get percentLoaded():Number		{			return (_bytesLoaded / _bytesTotal) * 100;		}						//-----------------------------------------------------------------------------------------		// Event Handlers		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function onOpen(e:Event):void		{			relayEvent(FileIOEvent.OPEN);		}						/**		 * @private		 */		protected function onProgress(e:ProgressEvent):void		{			_bytesLoaded = _file.size = e.bytesLoaded;			_bytesTotal = e.bytesTotal;			relayEvent(FileIOEvent.PROGRESS);		}						/**		 * @private		 */		protected function onHTTPStatus(e:HTTPStatusEvent):void		{			relayEvent(FileIOEvent.HTTP_STATUS, "", e.status);		}						/**		 * @private		 */		protected function onFileComplete(e:Event):void		{			_loading = false;			removerListenersFrom();			_file.addEventListener(Event.COMPLETE, onFileReady, false, 0, true);			_file.content = _urlLoader.data;		}						/**		 * @private		 */		protected function onFileReady(e:Event):void 		{			_file.removeEventListener(Event.COMPLETE, onFileReady);			relayEvent(FileIOEvent.FILE_COMPLETE);		}						/**		 * @private		 */		protected function onIOError(e:IOErrorEvent):void		{			_loading = false;			removerListenersFrom();			relayEvent(FileIOEvent.IO_ERROR, e.text);		}						/**		 * @private		 */		protected function onSecurityError(e:SecurityErrorEvent):void		{			_loading = false;			removerListenersFrom();			relayEvent(FileIOEvent.SECURITY_ERROR, e.text);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function removerListenersFrom():void		{			_urlLoader.removeEventListener(Event.OPEN, onOpen);			_urlLoader.removeEventListener(ProgressEvent.PROGRESS, onProgress);			_urlLoader.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHTTPStatus);			_urlLoader.removeEventListener(Event.COMPLETE, onFileComplete);			_urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			_urlLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);		}						/**		 * @private		 */		protected function relayEvent(type:String, text:String = null, status:int = 0):void		{			dispatchEvent(new FileIOEvent(type, _file, text, status));		}	}}