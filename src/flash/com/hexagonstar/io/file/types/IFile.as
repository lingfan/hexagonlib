/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file.types{	import flash.events.IEventDispatcher;	import flash.utils.ByteArray;		/**	 * IFile Interface	 * TODO Add better description!	 */	public interface IFile extends IEventDispatcher	{		//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Returns a string representation of the file.		 * 		 * @return A string representation of the file.		 */		function toString():String;						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The path of the file.		 */		function get path():String;		function set path(v:String):void;				/**		 * The ID of the file.		 */		function get id():String;		function set id(v:String):void;						/**		 * The file's priority.		 */		function get priority():Number;		function set priority(v:Number):void;						/**		 * The file's weight. This is only used for weighted loading with BulkLoader.		 */		function get weight():int;		function set weight(v:int):void;						/**		 * The size of the file.		 */		function get size():uint;		function set size(v:uint):void;				/**		 * Determines whether the file's content is valid or not. This property		 * is false unless data has been loaded and parsed successfully into the		 * file.		 */		function get valid():Boolean;						/**		 * Determines the file's status. After the file object has been created		 * the status is Status.INIT, after the file has been loaded and it's		 * data content is available the status is Status.OK. If any error occured		 * during loading or content parsing the status contains the error message.		 * 		 * @see com.hexagonstar.data.constants.Status		 */		function get status():String;						/**		 * The file's content in the file's specific default format.		 */		function get content():*;		function set content(v:*):void;						/**		 * The file's content as a ByteArray.		 */		function get contentAsBytes():ByteArray;		function set contentAsBytes(v:ByteArray):void;						/**		 * The file type ID.		 */		function get fileTypeID():int;	}}