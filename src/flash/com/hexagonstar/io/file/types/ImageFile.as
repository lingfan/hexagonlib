/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.io.file.types{	import com.hexagonstar.data.constants.Status;
	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.utils.ByteArray;		/**	 * ImageFile Class	 * TODO Add better description!	 */	public class ImageFile extends BinaryFile implements IFile	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				protected var _loader:Loader;		protected var _bitmapData:BitmapData;		protected var _transparent:Boolean;		protected var _fillColor:uint;		protected var _smoothing:Boolean;		protected var _pixelSnapping:String;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new ImageFile instance.		 * @param path		 * @param id		 * @param priority		 * @param weight		 * @param transparent		 * @param fillColor		 * @param smoothing		 * @param pixelSnapping		 */		public function ImageFile(path:String = null,								id:String = null,								priority:Number = NaN,								weight:int = 1,								transparent:Boolean = false,								fillColor:uint = 0x000000,								smoothing:Boolean = false,								pixelSnapping:String = "auto")		{			super(path, id, priority, weight);						_transparent = transparent;			_fillColor = fillColor;			_smoothing = smoothing;			_pixelSnapping = pixelSnapping;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * @inheritDoc		 */		override public function get fileTypeID():int		{			return FileTypeIndex.IMAGE_FILE_ID;		}						/**		 * @inheritDoc		 */		override public function get content():*		{			return contentAsBitmap;		}						/**		 * @inheritDoc		 */		override public function set contentAsBytes(v:ByteArray):void		{			if (!_loader) _loader = new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onComplete);						try			{				_loader.loadBytes(v);				_valid = true;				_status = Status.OK;			}			catch (err:Error)			{				_valid = false;				_status = err.message;			}		}						/**		 * The ImageFile as a Bitmap object. This creates and returns a new Bitmap object.		 */		public function get contentAsBitmap():Bitmap		{			var b:BitmapData = contentAsBitmapData;			if (b) return new Bitmap(b, _pixelSnapping, _smoothing);			return null;		}						/**		 * The ImageFile as a BitmapData object.		 */		public function get contentAsBitmapData():BitmapData		{			return _bitmapData;		}						//-----------------------------------------------------------------------------------------		// Event Handlers		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function onComplete(e:Event):void 		{			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onComplete);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onComplete);						if (_loader.content != null)			{				try				{					_bitmapData = new BitmapData(_loader.content.width, _loader.content.height,						_transparent, _fillColor);				}				catch (err:Error)				{					_valid = false;					_status = err.message;				}				
				if (_bitmapData) _bitmapData.draw(_loader.content);			}						_loader = null;			dispatchEvent(new Event(Event.COMPLETE));		}	}}