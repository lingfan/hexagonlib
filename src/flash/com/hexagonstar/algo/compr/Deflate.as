/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.algo.compr
{
	import com.hexagonstar.data.constants.Status;

	import flash.utils.ByteArray;			/**	 * The Deflate class compresses input with the deflate algorithm described in	 * RFC 1951. It uses the ByteArray compress method to deflate.	 */	public class Deflate	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		private var _buffer:ByteArray;		/** @private */		private var _totalIn:uint;		/** @private */		private var _totalOut:uint;		/** @private */		private var _compressed:Boolean;		/** @private */		private var _valid:Boolean;		/** @private */		private var _status:String;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new instance of the class.		 */		public function Deflate()		{			reset();		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/** 		 * Resets the deflate. The deflate acts afterwards as if it was just created.		 */		public function reset():void		{			if (!_buffer) _buffer = new ByteArray();						_buffer.clear();			_compressed = false;
			_totalOut = _totalIn = 0;
			_valid = false;
			_status = Status.INIT;		}						/**		 * Deflates (compresses) the current input block to the given bytearray.		 * 		 * @param input the buffer containing the input data.		 * @param output the buffer where to write the compressed data.		 */		public function process(input:ByteArray, output:ByteArray):void		{			_buffer.writeBytes(input);			_totalIn = _buffer.length;						if (!_compressed)			{				try				{					_buffer.compress();					_compressed = true;					_valid = true;					_status = Status.OK;				}				catch (err1:Error)				{					_valid = false;					_status = err1.message;				}			}						if (_valid)			{				/* remove 2-byte header and last 4-byte addler32 checksum */				output.writeBytes(_buffer, 2, _buffer.length - 6);				_totalOut = output.length;			}			else			{				try				{					output.writeBytes(input, 2, input.length - 6);					_totalOut = output.length;				}				catch (err2:Error)				{					_valid = false;					_status = err2.message;				}			}		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Gets the number of input bytes.		 */		public function get inputBytes():uint		{			return _totalIn;		}						/**		 * Gets the number of output bytes.		 */		public function get outputBytes():uint		{
			return _totalOut;
		}						/**		 * Determines whether the Deflate is in a valid state or not.		 */
		public function get valid():Boolean
		{
			return _valid;
		}						/**		 * The status of the Deflate.		 */
		public function get status():String
		{
			return _status;
		}	}}