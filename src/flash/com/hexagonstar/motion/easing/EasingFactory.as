/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.motion.easing{	import com.hexagonstar.exception.IllegalArgumentException;		/**	 * EasingFactory Class	 */	public class EasingFactory	{		/**		 * create		 */		public static function create(type:String, mode:String):Function		{			var easing:IEasing;			var f:Function;						switch (type)			{				case EasingType.BACK:					easing = new BackEasing();					break;				case EasingType.BOUNCE:					easing = new BounceEasing();					break;				case EasingType.CIRCULAR:					easing = new CircularEasing();					break;				case EasingType.CUBIC:					easing = new CubicEasing();					break;				case EasingType.ELASTIC:					easing = new ElasticEasing();					break;				case EasingType.EXPO:					easing = new ExpoEasing();					break;				case EasingType.LINEAR:					easing = new LinearEasing();					break;				case EasingType.QUAD:					easing = new QuadEasing();					break;				case EasingType.QUART:					easing = new QuartEasing();					break;				case EasingType.QUINT:					easing = new QuintEasing();					break;				case EasingType.SINE:					easing = new SineEasing();					break;				default:					throw new IllegalArgumentException("[EasingFactory] Easing type '"						+ type + "' is unknown. Use the EasingType class to specify the type!");			}						switch (mode)			{				case EasingMode.IN:					f = easing.easeIn;					break;				case EasingMode.OUT:					f = easing.easeOut;					break;				case EasingMode.INOUT:					f = easing.easeInOut;					break;				default:					throw new IllegalArgumentException("[EasingFactory] Easing mode '"						+ mode + "' is unknown. Use the EasingMode class to specify the mode!");			}						return f;		}	}}