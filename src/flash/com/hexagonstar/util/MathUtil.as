/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	/**	 * MathUtil Class	 */	public class MathUtil	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				/** @private */		private static const COEFFICIENT1:Number = Math.PI / 4;						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Rounds the specified value. By default the value is rounded to the nearest		 * integer. Specifying a decimals parameter allows to round to the nearest of a		 * specified interval.		 * 		 * @param value the number to round.		 * @param decimals the number of decimal places to round the number.		 * @return the number rounded to the nearest interval.		 * 		 * @example		 * <pre>		 *     trace(MathUtil.round(3.14159, 2)); // Traces 3.14		 *     trace(MathUtil.round(3.14159, 3)); // Traces 3.142		 * </pre>		 */		public static function round(value:Number, decimals:int = 0):Number		{			var p:Number = Math.pow(10, decimals);			return Math.round(value * p) / p;		}						/**		 * Returns the floor part of the specified value. By default the integer part		 * of the number is returned just as if calling Math.floor(). However, by		 * a decimals argument, non-integer floor parts to the nearest of the specified		 * decimals interval can be returned.		 * 		 * @param value the number for which the floor part should be returned.		 * @param decimals the number of decimal places to get the floor part of the number.		 * @return the floor part of the number.		 */		public static function floor(value:Number, decimals:int = 0):Number		{			var p:Number = Math.pow(10, decimals);			return Math.floor(value * p) / p;		}						/**		 * Returns the ceiling part of the specified value. By default the next highested		 * integer number is returned just as if calling Math.ceil(). However, by specifying		 * a decimals argument, non-integer ceiling parts to the nearest of the specified		 * decimals interval can be returned.		 * 		 * @param value the number for which the ceiling part should be returned.		 * @param decimals the number of decimal places to get the ceiling part of the number.		 * @return the ceiling part of the number.		 */		public static function ceil(value:Number, decimals:int = 0):Number		{			var p:Number = Math.pow(10, decimals);			return Math.ceil(value * p) / p;		}						/**		 * Evaluates val1 and val2 and returns the smaller value. Unlike Math.min this		 * method will return the defined value if the other value is null or not a number.		 * 		 * @param val1 a value to compare.		 * @param val2 a value to compare.		 * @return Returns the smallest value, or the value out of the two that		 *          is defined and valid.		 * 		 * @example		 * <pre>		 *     trace(NumberUtil.min(5, null)); // Traces 5		 *     trace(NumberUtil.min(5, "Hexagon")); // Traces 5		 *     trace(NumberUtil.min(5, 13)); // Traces 5		 * </pre>		 */		public static function min(val1:*, val2:*):Number 		{			if (isNaN(val1) && isNaN(val2) || val1 == null && val2 == null) return NaN;			if (val1 == null || val2 == null) return (val2 == null) ? val1 : val2;			if (isNaN(val1) || isNaN(val2)) return isNaN(val2) ? val1 : val2;			return Math.min(val1, val2);		}						/**		 * Evaluates val1 and val2 and returns the larger value. Unlike Math.max this		 * method will return the defined value if the other value is null or not a number.		 * 		 * @param val1: A value to compare.		 * @param val2: A value to compare.		 * @return Returns the largest value, or the value out of the two that		 *          is defined and valid.		 * 		 * @example		 * <pre>		 *     trace(NumberUtil.max(-5, null)); // Traces -5		 *     trace(NumberUtil.max(-5, "Hexagon")); // Traces -5		 *     trace(NumberUtil.max(-5, -13)); // Traces -5		 * </pre>		 */		public static function max(val1:*, val2:*):Number 		{			if (isNaN(val1) && isNaN(val2) || val1 == null && val2 == null) return NaN;			if (val1 == null || val2 == null) return (val2 == null) ? val1 : val2;			if (isNaN(val1) || isNaN(val2)) return (isNaN(val2)) ? val1 : val2;			return Math.max(val1, val2);		}						/**		 * A faster version of Math.sqrt. Computes and returns the square root of		 * the specified number.		 * 		 * @param val A number greater than or equal to 0.		 * @return If the parameter val is greater than or equal to zero, a number;		 *          otherwise NaN (not a number).		 */		public static function sqrt(val:Number):Number		{			if (isNaN(val)) return NaN;			if (val == 0) return 0;						var thres:Number = 0.002;			var b:Number = val * 0.25;			var a:Number;			var c:Number;						do			{				c = val / b;				b = (b + c) * 0.5;				a = b - c;				if (a < 0) a = -a;			}			while (a > thres);						return b;		}						/**		 * A faster (but much less accurate) version of Math.atan2(). For close range/loose		 * comparisons this works very well, but avoid for long-distance or high accuracy		 * simulations.<p>		 * Computes and returns the angle of the point y/x in radians, when measured		 * counterclockwise from a circle's x axis (where 0,0 represents the center of the		 * circle). The return value is between positive pi and negative pi. Note that the		 * first parameter to atan2 is always the y coordinate.</p>		 * 		 * @param y The y coordinate of the point.		 * @param x The x coordinate of the point.		 * @return The angle of the point x/y in radians.		 */		public static function atan2(y:Number, x:Number):Number		{			var absY:Number = y;			var coefficient2:Number = 3 * COEFFICIENT1;			var r:Number;			var angle:Number;						if (absY < 0) absY = -absY;			if (x >= 0)			{				r = (x - absY) / (x + absY);				angle = COEFFICIENT1 - COEFFICIENT1 * r;			}			else			{				r = (x + absY) / (absY - x);				angle = coefficient2 - COEFFICIENT1 * r;			}    			return (y < 0) ? -angle : angle;		}						/**		 * Experimental - Much faster version of v % d only for when d is any power of 2.		 * 		 * @param value The amount to divide.		 * @param divisor The divisor, must be a power of 2.		 * @return The remainder.		 */		public static function powerOf2Mod(value:int, divisor:int):int		{			return value & (divisor - 1);		}						/**		 * Calculates the percentage of the specified value in relation to the total.		 * 		 * @example		 * <pre>		 *	var totalHeight:int = 118;		 *	var currentHeight:int = 41;		 *	var currentHeightPercent:Number = MathUtil.toPercent(currentHeight, totalHeight);		 *	trace(currentHeightPercent); // 34.74576271186441		 * </pre>		 * 		 * @param value The value of which to calculate the percentage.		 * @param total The total value.		 * @return The calculated percentage of the value.		 */		public static function toPercent(value:Number, total:Number):Number		{			return (value / total) * 100;		}						/**		 * Calculates the value of the specified percentage in relation to the total.		 * 		 * @example		 * <pre>		 *  var totalHeight:int = 118;		 *	var currentHeightPercent:int = 34;		 *	var currentHeight:Number = MathUtil.fromPercent(currentHeightPercent, totalHeight);		 *	trace(currentHeight); // 40.120000000000005		 * </pre>		 * 		 * @param percent The percent of which to calculate the value.		 * @param total The total value.		 * @return The calculated value of the percent.		 */		public static function fromPercent(percent:Number, total:Number):Number		{			return total * (percent / 100);		}	}}