/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.util{	import flash.system.ApplicationDomain;	import flash.utils.getQualifiedClassName;		/**	 * VectorUtil Class	 */	public class VectorUtil	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				/** @private */		private static const VECTOR_CLASS_NAME:String = getQualifiedClassName(Vector);						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Creates a Vector of the specified type and returns it.		 * 		 * @param type The type that the created vector should have, e.g. String.		 * @param length Optional length for the vector.		 * @param fixed Determines if the vector has a fixed length.		 * @param applicationDomain The used applicationDomain.		 * @return A new vector of type 'type'.		 */		public static function createVectorOfType(type:Class, length:uint = 0, fixed:Boolean = false,			applicationDomain:ApplicationDomain = null):Vector.<*>		{			if (!applicationDomain) applicationDomain = ApplicationDomain.currentDomain;			var vector:Class = Class(applicationDomain.getDefinition(VECTOR_CLASS_NAME				+ ".<" + getQualifiedClassName(type) + ">"));			return new vector(length, fixed);		}						/**		 * Creates a Vector of type int that is populated with integers from		 * the specified array.		 * 		 * @param array An array with integer values.		 * @param sort true if the vector should be sorted.		 * @return A vector with integers.		 */		public static function createIntegerVector(array:Array, sort:Boolean = false):Vector.<int>		{			var v:Vector.<int> = new Vector.<int>();			for each (var i:int in array)			{				v.push(i);			}			return sort ? v.sort(sortIntegers) : v;		}						/**		 * Creates a Vector of type Number that is populated with numbers from		 * the specified array.		 * 		 * @param array An array with number values.		 * @param sort true if the vector should be sorted.		 * @return A vector with numbers.		 */		public static function createNumberVector(array:Array, sort:Boolean = false):Vector.<Number>		{			var v:Vector.<Number> = new Vector.<Number>();			for each (var i:Number in array)			{				v.push(i);			}			return sort ? v.sort(sortNumbers) : v;		}						/**		 * Creates a Vector of type String that is populated with strings from		 * the specified array.		 * 		 * @param array An array with string values.		 * @param sort true if the vector should be sorted.		 * @return A vector with strings.		 */		public static function createStringVector(array:Array, sort:Boolean = false):Vector.<String>		{			var v:Vector.<String> = new Vector.<String>();			for each (var i:String in array)			{				v.push(i);			}			return sort ? v.sort(sortStrings) : v;		}						/**		 * sortIntegerVector		 */		public static function sortIntegerVector(vector:Vector.<int>):Vector.<int>		{			return vector.sort(sortIntegers);		}						/**		 * sortNumberVector		 */		public static function sortNumberVector(vector:Vector.<Number>):Vector.<Number>		{			return vector.sort(sortNumbers);		}						/**		 * sortStringVector		 */		public static function sortStringVector(vector:Vector.<String>):Vector.<String>		{			return vector.sort(sortStrings);		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		private static function sortIntegers(x:int, y:int):Number		{			if (x < y) return -1;			else if (x > y) return 1;			else return 0;		}						/**		 * @private		 */		private static function sortNumbers(x:Number, y:Number):Number		{			if (x < y) return -1;			else if (x > y) return 1;			else return 0;		}						/**		 * @private		 */		private static function sortStrings(x:String, y:String):Number		{			if (x < y) return -1;			else if (x > y) return 1;			else return 0;		}	}}