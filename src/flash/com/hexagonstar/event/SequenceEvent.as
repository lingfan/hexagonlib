/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.event{	import flash.events.Event;		/**	 * An event dispatched from Sequence.	 */	public class SequenceEvent extends Event	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				public static const START:String	= "start";		public static const STOP:String		= "stop";		public static const COMPLETE:String	= "complete";		public static const RESUME:String	= "resume";		public static const LOOP:String		= "loop";						//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _loops:uint;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new SequenceEvent.		 * 		 * @param type The type of event.		 * @param loops		 */		public function SequenceEvent(type:String, loops:uint = 0)		{			super(type, false, false);			_loops = loops;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Clones the event object.		 * 		 * @return a clone of the event.		 */		override public function clone():Event 		{			return new SequenceEvent(type, _loops);		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The number of times the sequence has run.		 */		public function get loops():uint		{			return _loops;		}		public function set loops(v:uint):void 		{			_loops = v;		}	}}