/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.event{	import com.hexagonstar.io.file.types.IFile;	import com.hexagonstar.io.net.HTTPStatusCodes;	import flash.events.Event;		/**	 * An event used for file operations. It defines constant event identifiers for file	 * IO events. It also stores the HTTP Status value for HTTPStatus Events so that	 * they can be traced back after the original event has already been removed.	 */	public class FileIOEvent extends Event	{		//-----------------------------------------------------------------------------------------		// Constants		//-----------------------------------------------------------------------------------------				public static const OPEN:String					= "fileIOOpen";		public static const PROGRESS:String				= "fileIOProgress";		public static const FILE_COMPLETE:String		= "fileIOFileComplete";		public static const COMPLETE:String				= "fileIOComplete";		public static const ABORT:String				= "fileIOAbort";		public static const PAUSE:String				= "fileIOPause";		public static const UNPAUSE:String				= "fileIOUnpause";		public static const HTTP_STATUS:String			= "fileIOHTTPStatus";		public static const IO_ERROR:String				= "fileIOIOError";		public static const SECURITY_ERROR:String		= "fileIOSecurityError";						//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				public var bytesLoaded:uint;		public var bytesTotal:uint;		public var percentLoaded:int;				/** @private */		protected var _file:IFile;		/** @private */		protected var _text:String;		/** @private */		protected var _httpStatus:int;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new FileIOEvent instance.		 * 		 * @param type		 * @param file		 * @param text		 * @param httpStatus		 * @param bytesLoaded		 * @param bytesTotal		 */		public function FileIOEvent(type:String, file:IFile = null, text:String = null,			httpStatus:int = 0, bytesLoaded:uint = 0, bytesTotal:uint = 0)		{			super(type);						_file = file;			_text = text;			_httpStatus = httpStatus;						/* No need to waste time setting these for non-progress type events! */			if (type == FileIOEvent.PROGRESS)			{				this.bytesLoaded = bytesLoaded;				this.bytesTotal = bytesTotal;				this.percentLoaded = this.bytesTotal > 0					? ((this.bytesLoaded / this.bytesTotal) * 100)					: 0;			}		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Clones the event.		 */		override public function clone():Event		{			return new FileIOEvent(type, _file, _text, _httpStatus, bytesLoaded, bytesTotal);		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * A reference to the last loaded file.		 */		public function get file():IFile		{			return _file;		}						/**		 * The text of the FileIOEvent. In case of an error event this contains the error		 * status message.		 */		public function get text():String		{			return _text;		}						/**		 * The HTTP status value for HTTPStatus events.		 */		public function get httpStatus():int		{			return _httpStatus;		}						/**		 * A more verbose HTTPStatus info if available.		 */		public function get httpStatusInfo():String		{			var s:String = HTTPStatusCodes.getStatusCode(_httpStatus);			if (!s) return _httpStatus.toString();			return _httpStatus + " " + s;		}	}}