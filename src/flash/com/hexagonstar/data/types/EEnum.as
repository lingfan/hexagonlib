/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.types{	import com.hexagonstar.core.BasicClass;	import flash.utils.describeType;		/**	 * The EEnum class can be used to 'simulate' Enums in ActionScript. To create	 * Enum types with this class your Enum class needs to extend it and then call it's	 * protected init method in a static constructor. After that you declare your	 * Enum values as static constants by assigning them the type of your Enum class.	 * 	 * @example	 * <pre>	 *	package	 *	{	 *		import com.hexagonstar.data.types.EEnum;	 *			 *		public class Gender extends EEnum	 *		{	 *			// Static Constructor:	 *			{init(Gender);}	 *				 *			public static const MALE:Gender = new Gender();	 *			public static const FEMALE:Gender = new Gender();	 *			public static const BOTH:Gender = new Gender();	 *			public static const NEUTER:Gender = new Gender();	 *		}	 *	}	 * </pre>	 */	public class EEnum extends BasicClass	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		private var _value:String = null;						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Returns a String Representation of EEnum.		 * 		 * @return A String Representation of EEnum.		 */		override public function toString(...args):String		{			return super.toString("value=" + _value);		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * Returns the value of the EEnum.		 */		public function get value():String		{			return _value;		}						//-----------------------------------------------------------------------------------------		// Private Methods		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected static function init(type:*):void		{			var t:XML = describeType(type);						for each (var c:XML in t.constant)			{				var e:EEnum = type[c.@name];								/* if 'value' is already initialized, then we're probably calling				 * init() on the same type twice by accident, likely a copy-paste				 * bonehead mistake. */				if (e._value != null)				{					throw new Error("Can't initialize EEnum '" + type + "' twice!");				}								/* if the types don't match then probably have another copy-paste error. */				var obj:Object = e;				if (obj.constructor != type)				{					throw new Error("EEnum constant type [" + obj.constructor + "]"						+ " does not match its enum class [" + type + "]!");				}								e._value = c.@name;			}		}	}}