/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.data.types{	/**	 * Creates a standardized way of describing and storing an extent	 * of variation/a value range.	 * 	 * @example	 * <pre>	 *	var r:Range = new Range(123, 468);	 *	trace(r.isWithinRange(55)); // false	 *	trace(r.isWithinRange(200)); // true	 * </pre>	 */	public class Range	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _start:Number;		/** @private */		protected var _end:Number;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates and defines a Range object.		 *		 * @param start Beginning value of the range.		 * @param end Ending value of the range.		*/		public function Range(start:Number = 0, end:Number = 0)		{			setRange(start, end);		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Defines or redefines the range.		 * 		 * @param start Beginning value of the range.		 * @param end Ending value of the range.		*/		public function setRange(start:Number, end:Number):void		{			_start = start;			_end = end;		}						/**		 * Determines if the value is included in the range including the range's		 * start and end values.		 * 		 * @return Returns true if value was included in range; otherwise false.		 */		public function isWithinRange(value:Number):Boolean		{			return (value <= max && value >= min);		}						/**		 * Calculates the percent of the range.		 * 		 * @param percent A Percent object.		 * @return The value the percent represent of the range.		 */		public function getValueOfPercent(percent:Percent):Number		{			var min:Number;			var max:Number;			var p:Percent = percent.clone();						if (_start <= _end)			{				min = _start;				max = _end;			}			else			{				p.decimalPercentage = 1 - p.decimalPercentage;				min = _end;				max = _start;			}						return Math.abs(max - min) * p.decimalPercentage + min;		}						/**		 * Returns the percentage the value represents out of the range.		 * 		 * @param value An integer.		 * @return A Percent object.		 */		public function getPercentOfValue(value:Number):Percent		{			return new Percent((value - min) / (max - min));		}						/**		 * Determines if the range specified by the range parameter is equal		 * to this range object.		 * 		 * @param percent A Range object.		 * @return Returns true if ranges are identical; otherwise false.		 */		public function equals(range:Range):Boolean		{			return (_start == range.start && _end == range.end);		}						/**		 * Determines if this range and the range specified by the range parameter overlap.		 * 		 * @param A Range object.		 * @return Returns true if this range contains any value of the range specified;		 *          otherwise false.		 */		public function overlaps(range:Range):Boolean		{			if (equals(range) || contains(range) || range.contains(this)				|| isWithinRange(range.start) || isWithinRange(range.end))				return true;						return false;		}						/**		 * Determines if this range contains the range specified by the range parameter.		 * 		 * @param A Range object.		 * @return Returns true if this range contains all values of the range specified;		 *          otherwise false.		 */		public function contains(range:Range):Boolean		{			return (_start <= range.start && _end >= range.end);		}						/**		 * Clones the Range object.		 * 		 * @return A new range object with the same values as this range.		 */		public function clone():Range		{			return new Range(_start, _end);		}						/**		 * Returns a String Representation of Range.		 * 		 * @return A String Representation of Range.		 */		public function toString():String		{			return "[Range start=" + _start + ", end=" + _end + "]";		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The start value of the range.		 */		public function get start():Number		{			return _start;		}		public function set start(v:Number):void		{			_start = v;		}				/**		 * The end value of the range.		 */		public function get end():Number		{			return _end;		}		public function set end(v:Number):void		{			_end = v;		}				/**		 * The minimum or smallest value of the range.		 */		public function get min():Number		{			return Math.min(_start, _end);		}				/**		 * The maximum or largest value of the range.		 */		public function get max():Number		{			return Math.max(_start, _end);		}	}}