/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.geom{	/**	 * A class to generate and hold a sine and cosine table.	 */	public class SinCosTable	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/**		 * The generated sine table.		 */		public var sinTable:Vector.<Number>;				/**		 * The generated cosine table.		 */		public var cosTable:Vector.<Number>;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------
				/**		 * Generates a sine and cosine table simultaneously and extremely quickly. The		 * parameters allow you to specify the length, amplitude and frequency of the wave.		 * Once you have called this function you should get the results via getSinTable()		 * and getCosTable(). This generator is fast enough to be used in real-time.		 * 		 * @param length The length of the wave.		 * @param sinAmplitude The amplitude to apply to the sine table.If you		 *         need values between say -+ 125 then give 125 as the value.		 * @param cosAmplitude The amplitude to apply to the cosine table. If you		 *         need values between say -+ 125 then give 125 as the value.		 * @param frequency The frequency of the sine and cosine table data.		 */		public function SinCosTable(length:int, sinAmplitude:Number = 1.0,			cosAmplitude:Number = 1.0, frequency:Number = 1.0)		{			var sin:Number = sinAmplitude;			var cos:Number = cosAmplitude;			var frq:Number = frequency * Math.PI / length;						sinTable = new Vector.<Number>();			cosTable = new Vector.<Number>();						for (var c:int = 0; c < length; c++)			{				cos -= sin * frq;				sin += cos * frq;								cosTable.push(cos);				sinTable.push(sin);			}		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Returns a String Representation of SinCosTable.		 * 		 * @return A String Representation of SinCosTable.		 */		public function toString():String		{			return "[SinCosTable length=" + cosTable.length + "]";		}	}}