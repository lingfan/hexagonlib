/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.time{	import com.hexagonstar.core.AbstractDisposable;	import com.hexagonstar.core.IDisposable;	import com.hexagonstar.core.IRunnable;	import flash.events.Event;		/**	 * Creates a function callback after one or more frames have passed.	 * The class helps prevent race conditions by allowing recently created	 * MovieClips, Classes, etc. a frame to initialize before proceeding.	 * 	 * @example	 * <pre>	 *	package	 *	{	 *		import flash.display.Sprite;	 *		import com.hexagonstar.env.time.FrameDelay;	 *			 *		public class Example extends Sprite	 *		{	 *			private var _frameDelay:FrameDelay;	 *				 *			public function Example()	 *			{	 *				_frameDelay = new FrameDelay(onInitComplete, 1, "Ready!");	 *				_frameDelay.start();	 *			}	 *				 *			private function onInitComplete(...args):void	 * 			{	 *				trace(args[0]);	 *				_frameDelay.dispose();	 *			}	 *		}	 *	}	 * </pre>	 */	public class FrameDelay extends AbstractDisposable implements IRunnable, IDisposable	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _callBack:Function;		/** @private */		protected var _frames:int;		/** @private */		protected var _count:int;		/** @private */		protected var _args:Array;		/** @private */		protected var _enterFrame:EnterFrame;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new FrameDelay instance.		 * 		 * @param closure The function to execute after the frame delay.		 * @param frames The amount of frames to delay.		 * @param args Arguments to be passed to the function when executed.		 */		public function FrameDelay(closure:Function, frames:int = 1, ...args)		{			_callBack = closure;			_frames = frames;			_args = args;			_enterFrame = EnterFrame.instance;		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Starts or restarts the delay.		 */		public function start():void		{			_count = 0;			_enterFrame.addEventListener(Event.ENTER_FRAME, onEnterFrame, false, 0, true);		}						/**		 * Stops the delay from completing.		 */		public function stop():void		{			_enterFrame.removeEventListener(Event.ENTER_FRAME, onEnterFrame);		}						/**		 * Disposes the object.		 */		override public function dispose():void		{			if (_enterFrame.hasEventListener(Event.ENTER_FRAME))			{				_enterFrame.removeEventListener(Event.ENTER_FRAME, onEnterFrame);			}			super.dispose();		}								//-----------------------------------------------------------------------------------------		// Event Handlers		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function onEnterFrame(e:Event):void		{			if (++_count >= _frames)			{				stop();				_callBack.apply(null, _args);			}		}	}}