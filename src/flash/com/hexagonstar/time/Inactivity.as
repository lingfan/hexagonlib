/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.time{	import com.hexagonstar.core.IDisposable;	import com.hexagonstar.core.IRunnable;	import com.hexagonstar.display.StageReference;	import com.hexagonstar.event.InactivityEvent;	import flash.display.Stage;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	[Event(name="active", type="com.hexagonstar.event.InactivityEvent")]	[Event(name="inactive", type="com.hexagonstar.event.InactivityEvent")]			/**	 * Detects user inactivity by checking for a void in mouse movement and key presses.	 * You must first initialize StageReference before using this class.	 * 	 * @example	 * <pre>	 *	package	 *	{	 *		import flash.display.Sprite;	 *		import com.hexagonstar.env.time.Inactivity;	 *		import com.hexagonstar.display.StageReference;	 *		import com.hexagonstar.env.event.InactivityEvent;	 *			 *		public class Example extends Sprite	 *		{	 *			protected var _inactivity:Inactivity;	 *				 *			public function Example()	 *			{	 *				StageReference.stage = stage;	 *				// User should be considered inactive after 3 seconds:	 *				_inactivity = new Inactivity(3000);	 *				_inactivity.addEventListener(InactivityEvent.INACTIVE, onUserInactive);	 *				_inactivity.addEventListener(InactivityEvent.ACTIVE, onUserActive);	 *				_inactivity.start();	 *			}	 *				 *			public function onUserInactive(e:InactivityEvent):void	 *			{	 *				trace("User inactive for " + e.milliseconds + " milliseconds.");	 *			}	 *				 *			public function onUserActive(e:InactivityEvent):void	 *			{	 *				trace("User active after being inactive for " + e.milliseconds	 *				    + " milliseconds.");	 *			}	 *		}	 *	}	 * </pre>	 */	public class Inactivity extends EventDispatcher implements IRunnable, IDisposable	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _delay:uint;		/** @private */		protected var _interval:Interval;		/** @private */		protected var _stopwatch:Stopwatch;		/** @private */		protected var _disposed:Boolean = false;		/** @private */		protected var _ignoreMouse:Boolean;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates an Inactivity. You must first initialize StageReference before		 * using this class.		 * 		 * @param delay The time delay in milliseconds until a user is considered inactive.		 */		public function Inactivity(delay:uint = 5000, ignoreMouse:Boolean = false)		{			super();						_delay = delay;			_ignoreMouse = ignoreMouse;			_stopwatch = new Stopwatch();		}						//-----------------------------------------------------------------------------------------		// Public Methods		//-----------------------------------------------------------------------------------------				/**		 * Starts watching for user inactivity.		 */		public function start():void		{			if (!_interval)			{				_interval = Interval.setTimeOut(onInactivity, delay);			}						if (_interval.isRunning) return;						var stage:Stage = StageReference.stage;			stage.addEventListener(Event.RESIZE, onActivity, false, 0, true);			stage.addEventListener(KeyboardEvent.KEY_DOWN, onActivity, false, 0, true);			stage.addEventListener(KeyboardEvent.KEY_UP, onActivity, false, 0, true);						if (!_ignoreMouse)			{				stage.addEventListener(MouseEvent.MOUSE_DOWN, onActivity, false, 0, true);				stage.addEventListener(MouseEvent.MOUSE_MOVE, onActivity, false, 0, true);			}						_stopwatch.start();			_interval.start();		}						/**		 * Stops watching for user inactivity.		 */		public function stop():void 		{			if (!_interval) return;						_interval.reset();						var stage:Stage = StageReference.stage;			stage.removeEventListener(Event.RESIZE, onActivity);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, onActivity);			stage.removeEventListener(KeyboardEvent.KEY_UP, onActivity);			stage.removeEventListener(MouseEvent.MOUSE_DOWN, onActivity);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onActivity);		}						/**		 * Disposes the object.		 */		public function dispose():void		{			stop();			_interval.dispose();			_disposed = true;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				/**		 * The time delay in milliseconds until a user is considered inactive.		 */		public function get delay():uint		{			return _delay;		}		public function set delay(v:uint):void		{			_delay = v;		}						/**		 * If set to true the Inactivity will ignore mouse interactions and only keyboard		 * events are registered to determine activity/inactivity. The default is false.		 */		public function get ignoreMouse():Boolean		{			return _ignoreMouse;		}		public function set ignoreMouse(v:Boolean):void		{			_ignoreMouse = v;		}						/**		 * Determines if the object has been disposed (true), or is still available		 * for use (false).		*/		public function get disposed():Boolean		{			return _disposed;		}						//-----------------------------------------------------------------------------------------		// Event Handlers		//-----------------------------------------------------------------------------------------				/**		 * @private		 */		protected function onInactivity():void		{			_interval.stop();			dispatchEvent(new InactivityEvent(InactivityEvent.INACTIVE, _interval.delay));			_stopwatch.start();		}						/**		 * @private		 */		protected function onActivity(e:Event):void 		{			if (!_interval.isRunning)			{				dispatchEvent(new InactivityEvent(InactivityEvent.ACTIVE,					_stopwatch.time + _interval.delay));				_stopwatch.stop();			}						_interval.reset();			_interval.start();		}	}}