/* * hexagonlib - Multi-Purpose ActionScript 3 Library. *       __    __ *    __/  \__/  \__    __ *   /  \__/HEXAGON \__/  \ *   \__/  \__/  LIBRARY _/ *            \__/  \__/ * * Licensed under the MIT License *  * Permission is hereby granted, free of charge, to any person obtaining a copy of * this software and associated documentation files (the "Software"), to deal in * the Software without restriction, including without limitation the rights to * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of * the Software, and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */package com.hexagonstar.time{	import com.hexagonstar.data.types.Time;	import com.hexagonstar.exception.AbstractMethodException;	import flash.events.EventDispatcher;	import flash.utils.getTimer;		/**	 * AbstractTimeConsumer represents a time consuming class. It saves and	 * provides informations about the time that the concrete class used	 * during it's operation. The concrete implementation needs to take	 * care of _startTime, _endTime, percentage, _isStarted and _isFinished.	 */	public class AbstractTimeConsumer extends EventDispatcher	{		//-----------------------------------------------------------------------------------------		// Properties		//-----------------------------------------------------------------------------------------				/** @private */		protected var _startTime:int;		/** @private */		protected var _endTime:int;		/** @private */		protected var _totalTime:Time;		/** @private */		protected var _restTime:Time;		/** @private */		protected var _duration:Time;		/** @private */		protected var _isStarted:Boolean;		/** @private */		protected var _isFinished:Boolean;						//-----------------------------------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------------------------------				/**		 * Creates a new AbstractTimeConsumer instance. This class should		 * not be instantiated! Use it as a super class for classes whose		 * processing time should be measured. The constructor needs to be		 * invoked with super() in the concrete class's constructor.		 */		public function AbstractTimeConsumer()		{			_startTime = -1;			_endTime = -1;			_totalTime = new Time(0);			_restTime = new Time(0);			_duration = new Time(0);			_isStarted = false;			_isFinished = false;		}						//-----------------------------------------------------------------------------------------		// Getters & Setters		//-----------------------------------------------------------------------------------------				public function get isStarted():Boolean		{			return _isStarted;		}						public function get isFinished():Boolean		{			return _isFinished;		}						public function get duration():Time		{ 			if (_endTime != -1) 			{				_duration.setValue(_endTime - _startTime);				return _duration;			}			else			{				_duration.setValue(getTimer() - _startTime);				return _duration;			}		}						public function get estimatedTotalTime():Time		{ 			if ((isStarted || isFinished) && percentage != -1) 			{				_totalTime.setValue(duration.milliseconds / percentage * 100);				return _totalTime; 			}			else			{				return null;			}		}						public function get estimatedRemainingTime():Time		{			if (!estimatedTotalTime)			{				return null;			}			else			{				_restTime.setValue(estimatedTotalTime.milliseconds - duration.milliseconds);				return _restTime;			}		}					    public virtual function get percentage():int	    {			throw new AbstractMethodException("Called the abstract method"				+ " get percentage() in AbstractTimeConsumer. Override this method"				+ " in the concrete class!");			return -1;		}	}}